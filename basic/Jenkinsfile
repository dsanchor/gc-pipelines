pipeline {
  agent {
      label 'maven'
  }
  stages {

    stage('Init pipeline') {
      steps {
        script {
           pipelineUtils = load 'common-functions/pipeline-utils.groovy'
	   // FIXME extract as parameter
           dir('config') {
             git 'https://github.com/dsanchor/gc-config.git'
           }
	   // FIXME extract as parameter
           dir('app') {
             git 'https://github.com/dsanchor/zapolo.git'
           }

        }
      }
    }

    stage('Create Build') {
      when {
        expression {
          openshift.withCluster() {
	    openshift.withProject(params.DESINT_PROJECT) {
              return !openshift.selector("bc", params.APP_NAME).exists();
            }
          }
        }
      }
      steps {
        script {
          openshift.withCluster() {
	    openshift.withProject(params.DESINT_PROJECT) {
              openshift.newBuild("--name=${params.APP_NAME}", "--image-stream=${params.BASE_IMAGE}", "--binary")
            }
          }
        }
      }
    }
    stage('Build Image') {
      steps {
        script {
          openshift.withCluster() {
	    openshift.withProject(params.DESINT_PROJECT) {
              openshift.selector("bc", params.APP_NAME).startBuild("--from-file=${params.APPLICATION_BINARY_URL}", "--wait")
            }
          }
        }
      }
    }
    stage('Promote image to DES-INT') {
      steps {
        script {
          openshift.withCluster() {
	    openshift.withProject(params.DESINT_PROJECT) {
              openshift.tag("${params.APP_NAME}:latest", "${params.APP_NAME}:desint")
            }
          }
        }
      }
    }
    stage('Configure DES-INT environment') {
      // always
      steps {
        script {
          openshift.withCluster() {
	    openshift.withProject(params.DESINT_PROJECT) {
              dir('config') {
                pipelineUtils.createConfigMap("sistemas-global", "openshift/global/des-int")
                pipelineUtils.createConfigMap("sistemas-${params.APP_NAME}", "openshift/apps/${params.APP_NAME}/des-int")
              }	      
              dir('app') {
                pipelineUtils.createConfigMap(params.APP_NAME, "openshift/des-int")
              }	
            }
          }
        }
      }
    }
    stage('Create deployment in DES-INT') {
      when {
        expression {
          openshift.withCluster() {
	    openshift.withProject(params.DESINT_PROJECT) {
              return !openshift.selector('dc', params.APP_NAME).exists()
            }
          }
        }
      }
      steps {
        script {
          openshift.withCluster() {
	    openshift.withProject(params.DESINT_PROJECT) {
              openshift.newApp("${params.APP_NAME}:desint", "--name=${params.APP_NAME}").narrow('svc').expose()
              openshift.set("triggers", "dc/${params.APP_NAME}", "--remove-all")
	      // FIXME extract as parameter
              openshift.set("resources", "dc/${params.APP_NAME}", "--limits", "cpu=400m,memory=1024Mi", "--requests", "cpu=200m,memory=512Mi")
	      // FIXME extract as parameter /opt/eap/standalone/configuration
              pipelineUtils.mountConfiguration("/opt/eap/standalone/configuration", params.APP_NAME)
            }
          }
        }
      }
    }
    stage('Deploy in DES-INT') {
      steps {
        script {
          openshift.withCluster() {
	    openshift.withProject(params.DESINT_PROJECT) {
              pipelineUtils.rollout(params.APP_NAME)
            }
          }
        }
      }
    }
    stage('Promote to PRE') {
      steps {
        script {
          openshift.withCluster() {
	    openshift.withProject(params.DESINT_PROJECT) {
              openshift.tag("${params.APP_NAME}:desint", "${params.APP_NAME}:pre")
            }
          }
        }
      }
    }
    stage('Deploy in PRE') {
      when {
        expression {
          openshift.withCluster() {
	    openshift.withProject(params.PRE_PROJECT) {
              return !openshift.selector('dc', params.APP_NAME).exists()
            }
          }
        }
      }
      steps {
        script {
          openshift.withCluster() {
	    openshift.withProject(params.PRE_PROJECT) {
              openshift.newApp("${params.DESINT_PROJECT}/${params.APP_NAME}:pre", "--name=${params.APP_NAME}").narrow('svc').expose()
            }
          }
        }
      }
    }
    stage('Promote to EXP') {
      steps {
        script {
          openshift.withCluster() {
	    openshift.withProject(params.DESINT_PROJECT) {
              openshift.tag("${params.APP_NAME}:pre", "${params.APP_NAME}:exp")
            }
          }
        }
      }
    }
    stage('Deploy in EXP') {
      when {
        expression {
          openshift.withCluster() {
	    openshift.withProject(params.EXP_PROJECT) {
              return !openshift.selector('dc', params.APP_NAME).exists()
            }
          }
        }
      }
      steps {
        script {
          openshift.withCluster() {
	    openshift.withProject(params.EXP_PROJECT) {
              openshift.newApp("${params.DESINT_PROJECT}/${params.APP_NAME}:exp", "--name=${params.APP_NAME}").narrow('svc').expose()
            }
          }
        }
      }
    }
  }
}
